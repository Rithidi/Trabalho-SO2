#include <iostream>
#include <string>
#include <unistd.h>
#include <sys/wait.h>
#include "../include/vehicle.hpp"

// Par√¢metros do teste
int NUM_VEICULOS = 2; // POR APARICAO
int NUM_APARICOES = 1;
int INTERVALO_APARICAO = 5; // SEGUNDOS
int TEMPO_PERMANENCIA = 30; // SEGUNDOS

int main(int argc, char *argv[]) {
    if (argc < 2) {
        std::cout << "Erro: Por favor, informe a interface de rede.\n";
        std::cout << "Uso: " << argv[0] << " <network-interface> [num_veiculos] [num_aparicoes] [intervalo_aparicao] [tempo_permanencia]\n";
        return 1;
    }

    std::string networkInterface = argv[1];

    // Fun√ß√£o auxiliar para ler argumentos
    auto parse_arg = [&](int index, int default_val) -> int {
        if (argc > index) {
            try {
                return std::stoi(argv[index]);
            } catch (...) {
                std::cout << "Aviso: par√¢metro " << index << " inv√°lido. Usando valor padr√£o " << default_val << ".\n";
            }
        }
        return default_val;
    };

    NUM_VEICULOS = parse_arg(2, NUM_VEICULOS);
    NUM_APARICOES = parse_arg(3, NUM_APARICOES);
    INTERVALO_APARICAO = parse_arg(4, INTERVALO_APARICAO);
    TEMPO_PERMANENCIA = parse_arg(5, TEMPO_PERMANENCIA);

    std::cout << "============================================================\n"
              << "üß™  TESTE: Sincroniza√ß√£o de Tempo entre Ve√≠culos\n"
              << "------------------------------------------------------------\n"
              << " Ve√≠culos sincronizam seus rel√≥gios com o Grandmaster.\n"
              << "============================================================\n"
              << std::endl;

    std::cout << "Par√¢metros do teste:\n";
    std::cout << " Interface de rede: " << networkInterface << "\n";
    std::cout << " N√∫mero de ve√≠culos: " << NUM_VEICULOS << "\n";
    std::cout << " N√∫mero de apari√ß√µes: " << NUM_APARICOES << "\n";
    std::cout << " Intervalo entre apari√ß√µes: " << INTERVALO_APARICAO << "s\n";
    std::cout << " Tempo de perman√™ncia dos ve√≠culos: " << TEMPO_PERMANENCIA << "s\n";

    // Cria processos filhos (ve√≠culos)
    for (int aparicao = 0; aparicao < NUM_APARICOES; ++aparicao) {
        std::cout << "\n‚≠ê Apari√ß√£o #" << (aparicao + 1) << " de " << NUM_APARICOES << std::endl;

        for (int i = 0; i < NUM_VEICULOS; ++i) {
            pid_t pid = fork();
            
            if (pid == 0) { // Processo filho (ve√≠culo)
                Veiculo veiculo(networkInterface, "Veiculo" + std::to_string(i + 1));
                // Mant√©m o ve√≠culo ativo pelo tempo especificado
                std::this_thread::sleep_for(std::chrono::seconds(TEMPO_PERMANENCIA));
                return 0;
            }
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
        }

        std::this_thread::sleep_for(std::chrono::seconds(INTERVALO_APARICAO));
    }

    // Espera todos os ve√≠culos desta apari√ß√£o terminarem
    while (wait(NULL) > 0);

    std::cout << "\n===============================" << std::endl;
    std::cout << "‚úÖ Teste finalizado." << std::endl;
    std::cout << "===============================\n" << std::endl;
    return 0;
}